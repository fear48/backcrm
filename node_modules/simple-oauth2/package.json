{
  "_args": [
    [
      {
        "raw": "simple-oauth2",
        "scope": null,
        "escapedName": "simple-oauth2",
        "name": "simple-oauth2",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Zver\\Desktop\\back1\\backend1"
    ]
  ],
  "_from": "simple-oauth2@latest",
  "_id": "simple-oauth2@1.4.0",
  "_inCache": true,
  "_location": "/simple-oauth2",
  "_nodeVersion": "6.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/simple-oauth2-1.4.0.tgz_1509762974805_0.6299956711009145"
  },
  "_npmUser": {
    "name": "jonathansamines",
    "email": "jn.samines@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "simple-oauth2",
    "scope": null,
    "escapedName": "simple-oauth2",
    "name": "simple-oauth2",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/simple-oauth2/-/simple-oauth2-1.4.0.tgz",
  "_shasum": "8ee61a9120e9c886eb6ac9b26d689c9830928e7c",
  "_shrinkwrap": null,
  "_spec": "simple-oauth2",
  "_where": "C:\\Users\\Zver\\Desktop\\back1\\backend1",
  "author": {
    "name": "Andrea Reginato",
    "email": "andrea.reginato@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/lelylan/simple-oauth2/issues"
  },
  "contributors": [
    {
      "name": "Jonathan Samines",
      "email": "jn.samines@gmail.com"
    }
  ],
  "dependencies": {
    "bluebird": "^3.5.0",
    "date-fns": "^1.3.0",
    "debug": "^3.0.1",
    "joi": "^12.0.0",
    "request": "^2.81.0"
  },
  "description": "Node.js client for OAuth2",
  "devDependencies": {
    "chai": "^4.1.2",
    "doctoc": "^1.0.0",
    "eslint": "^4.7.2",
    "eslint-config-airbnb-base": "^12.0.0",
    "eslint-plugin-import": "^2.2.0",
    "mocha": "^4.0.1",
    "nock": "^9.0.13"
  },
  "directories": {},
  "dist": {
    "shasum": "8ee61a9120e9c886eb6ac9b26d689c9830928e7c",
    "tarball": "https://registry.npmjs.org/simple-oauth2/-/simple-oauth2-1.4.0.tgz"
  },
  "engine": {
    "node": ">=4.0"
  },
  "gitHead": "34ee0f9fab445ab516679e90eda1b1a4ae1b755c",
  "homepage": "https://github.com/lelylan/simple-oauth2",
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "andreareginato",
      "email": "andrea.reginato@gmail.com"
    },
    {
      "name": "jonathansamines",
      "email": "jn.samines@gmail.com"
    }
  ],
  "name": "simple-oauth2",
  "optionalDependencies": {},
  "readme": "[![NPM Package Version](https://img.shields.io/npm/v/simple-oauth2.svg?style=flat-square)](https://www.npmjs.com/package/simple-oauth2)\n[![Build Status](https://img.shields.io/travis/lelylan/simple-oauth2.svg?style=flat-square)](https://travis-ci.org/lelylan/simple-oauth2)\n[![Dependency Status](https://img.shields.io/david/lelylan/simple-oauth2.svg?style=flat-square)](https://david-dm.org/lelylan/simple-oauth2)\n\n# Simple OAuth2\n\nNode.js client library for [OAuth2](http://oauth.net/2/) (this library supports both callbacks or promises for async flow).\n\nOAuth2 lets users grant the access to the desired resources to third party applications,\ngiving them the possibility to enable and disable those accesses whenever they want.\n\nSimple OAuth2 supports the following flows.\n\n* [Authorization Code Flow](http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.1) (for apps with servers that can store persistent information).\n* [Password Credentials](http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.3) (when previous flow can't be used or during development).\n* [Client Credentials Flow](http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4) (the client can request an access token using only its client credentials)\n\n#### Thanks to Open Source\n\nSimple OAuth 2.0 come to life thanks to the work I've made in Lelylan, an open source microservices architecture for the Internet of Things. If this project helped you in any way, think about giving us a <a href=\"https://github.com/lelylan/lelylan\">star on Github</a>.\n\n<a href=\"https://github.com/lelylan/lelylan\">\n<img src=\"https://raw.githubusercontent.com/lelylan/lelylan/master/public/logo-lelylan.png\" data-canonical-src=\"https://raw.githubusercontent.com/lelylan/lelylan/master/public/logo-lelylan.png\" width=\"300\"/></a>\n\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Requirements](#requirements)\n- [Getting started](#getting-started)\n  - [Installation](#installation)\n  - [Options](#options)\n  - [Example of Usage](#example-of-usage)\n- [OAuth2 Supported flows](#oauth2-supported-flows)\n  - [Authorization Code flow](#authorization-code-flow)\n  - [Password Credentials Flow](#password-credentials-flow)\n  - [Client Credentials Flow](#client-credentials-flow)\n- [Helpers](#helpers)\n  - [Access Token object](#access-token-object)\n  - [Errors](#errors)\n- [Contributing](#contributing)\n- [Authors](#authors)\n  - [Contributors](#contributors)\n- [Changelog](#changelog)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Requirements\nNode client library is tested against the latest minor Node versions: 4, 5 and 6.\n\nTo use in older node version, please use [simple-oauth2@0.x](https://github.com/lelylan/simple-oauth2/tree/v0.8.0).\n\n## Getting started\n\n### Installation\nInstall the client library using [npm](http://npmjs.org/):\n\n  ```bash\n    $ npm install --save simple-oauth2\n  ```\n\n### Options\nSimple OAuth2 accepts an object with the following valid params.\n\n* `client` - required object with the following properties:\n  - `id` - Service registered client id. Required.\n  - `secret` - Service registered client secret. Required.\n  - `secretParamName` - Parameter name used to send the client secret. Default to **client_secret**.\n  - `idParamName` - Parameter name used to send the client id. Default to **client_id**.\n\n* `auth` - required object with the following properties.\n  - `tokenHost` - String used to set the host to request the tokens to. Required.\n  - `tokenPath` - String path to request an access token. Default to **/oauth/token**.\n  - `revokePath` - String path to revoke an access token. Default to **/oauth/revoke**.\n  - `authorizeHost` - String used to set the host to request an \"authorization code\". Default to the value set on `auth.tokenHost`.\n  - `authorizePath` - String path to request an authorization code. Default to **/oauth/authorize**.\n\n* `http` optional object used to set global options to the internal http library (request-js).\n  - Any key is allowed here. Default to `headers.Accept = application/json`.\n\n* `options` optional object to setup the module.\n  - `bodyFormat` - Format of data sent in the request body. Valid values are `form` or `json`. Defaults to **form**.\n  - `useBodyAuth` - Whether or not the client.id/client.secret params are sent in the request body. Defaults to **true**.\n  - `useBasicAuthorizationHeader` - Whether or not the Basic Authorization header should be sent at the token request.\n\n```javascript\n// Set the configuration settings\nconst credentials = {\n  client: {\n    id: '<client-id>',\n    secret: '<client-secret>'\n  },\n  auth: {\n    tokenHost: 'https://api.oauth.com'\n  }\n};\n\n// Initialize the OAuth2 Library\nconst oauth2 = require('simple-oauth2').create(credentials);\n```\n\n### Example of Usage\nSee the [example folder](./example).\n\n## OAuth2 Supported flows\n### Authorization Code flow\n\nThe Authorization Code flow is made up from two parts. At first your application asks to\nthe user the permission to access their data. If the user approves the OAuth2 server sends\nto the client an authorization code. In the second part, the client POST the authorization code\nalong with its client secret to the oauth server in order to get the access token.\n\n```javascript\nconst oauth2 = require('simple-oauth2').create(credentials);\n\n// Authorization oauth2 URI\nconst authorizationUri = oauth2.authorizationCode.authorizeURL({\n  redirect_uri: 'http://localhost:3000/callback',\n  scope: '<scope>',\n  state: '<state>'\n});\n\n// Redirect example using Express (see http://expressjs.com/api.html#res.redirect)\nres.redirect(authorizationUri);\n\n// Get the access token object (the authorization code is given from the previous step).\nconst tokenConfig = {\n  code: '<code>',\n  redirect_uri: 'http://localhost:3000/callback'\n};\n\n// Callbacks\n// Save the access token\noauth2.authorizationCode.getToken(tokenConfig, (error, result) => {\n  if (error) {\n    return console.log('Access Token Error', error.message);\n  }\n\n  const accessToken = oauth2.accessToken.create(result);\n});\n\n// Promises\n// Save the access token\noauth2.authorizationCode.getToken(tokenConfig)\n.then((result) => {\n  const accessToken = oauth2.accessToken.create(result);\n})\n.catch((error) => {\n  console.log('Access Token Error', error.message);\n});\n```\n\n### Password Credentials Flow\n\nThis flow is suitable when the resource owner has a trust relationship with the\nclient, such as its computer operating system or a highly privileged application.\nUse this flow only when other flows are not viable or when you need a fast way to\ntest your application.\n\n```javascript\nconst oauth2 = require('simple-oauth2').create(credentials);\n\n// Get the access token object.\nconst tokenConfig = {\n  username: 'username',\n  password: 'password'Â \n};\n\n// Callbacks\n// Save the access token\noauth2.ownerPassword.getToken(tokenConfig, (error, result) => {\n  if (error) {\n    return console.log('Access Token Error', error.message);\n  }\n\n  const accessToken = oauth2.accessToken.create(result);\n});\n\n// Promises\n// Save the access token\noauth2.ownerPassword\n  .getToken(tokenConfig)\n  .then((result) => {\n    const accessToken = oauth2.accessToken.create(result);\n\n    return accessToken;\n  });\n```\n\n### Client Credentials Flow\n\nThis flow is suitable when client is requesting access to the protected resources under its control.\n\n```javascript\nconst oauth2 = require('simple-oauth2').create(credentials);\nconst tokenConfig = {};\n\n// Callbacks\n// Get the access token object for the client\noauth2.clientCredentials.getToken(tokenConfig, (error, result) => {\n  if (error) {\n    return console.log('Access Token Error', error.message);\n  }\n\n  const accessToken = oauth2.accessToken.create(result);\n});\n\n\n// Promises\n// Get the access token object for the client\noauth2.clientCredentials\n  .getToken(tokenConfig)\n  .then((result) => {\n    const accessToken = oauth2.accessToken.create(result);\n  })\n  .catch((error) => {\n    console.log('Access Token error', error.message);\n  });\n```\n\n## Helpers\n### Access Token object\n\nWhen a token expires we need to refresh it. Simple OAuth2 offers the\nAccessToken class that add a couple of useful methods to refresh the\naccess token when it is expired.\n\n```javascript\n// Sample of a JSON access token (you got it through previous steps)\nconst tokenObject = {\n  'access_token': '<access-token>',\n  'refresh_token': '<refresh-token>',\n  'expires_in': '7200'\n};\n\n// Create the access token wrapper\nlet accessToken = oauth2.accessToken.create(tokenObject);\n\n// Check if the token is expired. If expired it is refreshed.\nif (accessToken.expired()) {\n  // Callbacks\n  accessToken.refresh((error, result) => {\n    accessToken = result;\n  })\n\n  // Promises\n  accessToken.refresh()\n  .then((result) => {\n    accessToken = result;\n  });\n}\n```\n\nThe `expired` helper is useful for knowing when a token has definitively\nexpired. However, there is a common race condition when tokens are near\nexpiring. If an OAuth 2.0 token is issued with a `expires_in` property (as\nopposed to an `expires_at` property), there can be discrepancies between the\ntime the OAuth 2.0 server issues the access token and when it is received.\nThese come down to factors such as network and processing latency. This can be\nworked around by preemptively refreshing the access token:\n\n```javascript\n// Provide a window of time before the actual expiration to refresh the token\nconst EXPIRATION_WINDOW_IN_SECONDS = 300;\n\nconst { token } = accessToken;\nconst expirationTimeInSeconds = token.expires_at.getTime() / 1000;\nconst expirationWindowStart = expirationTimeInSeconds - EXPIRATION_WINDOW_IN_SECONDS;\n\n// If the start of the window has passed, refresh the token\nconst nowInSeconds = (new Date()).getTime() / 1000;\nconst shouldRefresh = nowInSeconds >= expirationWindowStart;\nif (shouldRefresh) {\n  // Callbacks\n  accessToken.refresh((error, result) => {\n    accessToken = result;\n  })\n\n  // Promises\n  accessToken.refresh()\n  .then((result) => {\n    accessToken = result;\n  });\n}\n```\n\nWhen you've done with the token or you want to log out, you can\nrevoke the access token and refresh token.\n\n```javascript\n\n// Callbacks\n// Revoke only the access token\naccessToken.revoke('access_token', (error) => {\n  // Session ended. But the refresh_token is still valid.\n\n  // Revoke the refresh_token\n  accessToken.revoke('refresh_token', (error) => {\n    console.log('token revoked.');\n  });\n});\n\n// Promises\n// Revoke only the access token\naccessToken.revoke('access_token')\n  .then(() => {\n    // Revoke the refresh token\n    return accessToken.revoke('refresh_token');\n  })\n  .then(() => {\n    console.log('Token revoked');\n  })\n  .catch((error) => {\n    console.log('Error revoking token.', error.message);\n  });\n```\n\n### Errors\n\nExceptions are raised when a 4xx or 5xx status code is returned.\n\n    HTTPError\n\nThrough the error message attribute you can access the JSON representation\nbased on HTTP `status` and error `message`.\n\n```javascript\n// Callbacks\noauth2.authorizationCode.getToken({}, (error, token) => {\n  if (error) {\n    return console.log(error.message);\n  }\n});\n\n// Promises\noauth2.authorizationCode\n  .getToken({})\n  .catch((error) => {\n    console.log(error.message);\n  });\n\n// => { \"status\": \"401\", \"message\": \"Unauthorized\" }\n```\n\n## Contributing\nSee [CONTRIBUTING](https://github.com/lelylan/simple-oauth2/blob/master/CONTRIBUTING.md)\n\n\n## Authors\n[Andrea Reginato](http://twitter.com/lelylan)\n\n\n### Contributors\nSpecial thanks to the following people for submitting patches.\n\n* [Jonathan Samines](http://twitter.com/jonathansamines)\n\n\n## Changelog\nSee [CHANGELOG](https://github.com/lelylan/simple-oauth2/blob/master/CHANGELOG.md)\n\n\n## License\n\nSimple OAuth 2.0 is licensed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lelylan/simple-oauth2.git"
  },
  "scripts": {
    "clean-install": "rm -rf node_modules && npm install",
    "docs-gen": "doctoc README.md --github --no-title",
    "fix": "eslint . --fix",
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "mocha ",
    "test-watch": "mocha --watch --reporter=spec"
  },
  "version": "1.4.0"
}
